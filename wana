#!/bin/sh

POSIXLY_CORRECT=yes
filters_count=0

# Error function
error() {
	case $1 in
		correct_form)
			echo "Usage: ./wana [FILTER] [COMMAND] [LOG1[LOG2[...]]" >&2;;
		invalid_date)
			echo "Invalid date, format: \"YYYY-MM-DD HH:MM:SS\"" >&2;;
		invalid_input)
			echo "Invalid input" >&2;;

	esac
}

# Listing hostnames from ip-adr
# If ip-adr dont have hostname, echo ip-adr
listHosts() {
	for line in $1
	do
		converted=$(host "$line")
	 	if [ $? -eq 1 ]
		then
	 		echo $line 
	 	else
	 		echo $converted | rev | cut -d' ' -f1 | rev
	 	fi
	done
}

# Checks if the date is correctly inserted
datetimeCheck(){
	correct=$(echo "$1" | awk '/^[1-2][0-9]{3}-[0-3][0-9]-[0-2][0-9]\ [0-2][0-9]:[0-5][0-9]:[0-5][0-9]$/')
	if [ -n "$correct" ]
		then
			return
		else
			error invalid_date
			exit 1
		fi
}

# Separates only the time from input
getDateTime(){

	cut -d '[' -f2 "$1" | cut -d ']' -f1 | cut -d ' ' -f1

}

dateConvert(){

	echo "$1" | tr '\/' ' ' | sed ' s/:/ /1' |
				sed ' s/Jan/01/g' |
				sed ' s/Feb/02/g' |
				sed ' s/Mar/03/g' |
				sed ' s/Apr/04/g' |
				sed ' s/May/05/g' |
				sed ' s/Jun/06/g' |
				sed ' s/Jul/07/g' |
				sed ' s/Aug/08/g' |
				sed ' s/Sep/09/g' |
				sed ' s/Oct/10/g' |
				sed ' s/Nov/11/g' |
				sed ' s/Dec/12/g' |
				awk ' { print $3 "-" $1 "-" $2 " " $4 } '
}

afterThisTime(){

	input=$(echo "$1" | sed ' s/\-//g' | sed ' s/://g' | sed ' s/ //g')
	comparator=$(echo "$2" | sed ' s/\-//g' | sed ' s/://g' | sed ' s/ //g')
	
	for line in $input
	do
		#date=$(echo "$line" | sed ' s/-/ /3' )
		
		if [ $line -gt "$comparator" ]
		then
			#echo $2
			echo $line
		fi
	done

}

# Applying the filters on logs
filters (){
	if [ $filters_count -eq 0 ]
	then
		cat "$1"
	fi

	while [ $filters_count -gt 0 ]; do
		if [ "$after_datetime" ]
		then
			times=$(getDateTime "$1")
			converted_times=$(dateConvert "$times")
			afterThisTime "$converted_times" "$after_datetime"
			
			#echo "$times"
			#epoch_times=$(echo "$times" | awk '{ date -d $0 +"%s" }')
			#echo "$epoch_times"
			#TODO

		elif [ "$before_datetime" ]
		then 
			echo "b"
		elif [ "$ip_arg" ]
		then
			echo "ip"
		elif [ "$uri_arg" ]
		then
			echo "uri"
		fi
		filters_count=$((filters_count-1))
		shift

	done

}


# Checks for all filters
while [ $# -gt 0 ]; do
	case $1 in
		-a )
			datetimeCheck "$2"
			after_datetime="$2"
			filters_count=$((filters_count+1))
			shift 2
			;;

		-b )
			datetimeCheck "$2"
			before_datetime="$2"
			shift 2
			filters_count=$((filters_count+1))
			;;

		-ip )
			ip_arg=$2
			shift 2
			filters_count=$((filters_count+1))
			;;

		-uri )
			uri_arg=$2
			shift 2
			filters_count=$((filters_count+1))
			;;

		*)
			break
			;;
	esac
done

# Checks for command 
case $1 in
	list-ip)
		list_ip=true
		shift 1
		;;

	list-hosts)
		list_hosts=true
		shift 1
		;;

	list-uri)
		list_uri=true
		shift 1
		;;

	hist-ip)
		hist_ip=true
		shift 1
		;;

	hist-load)
		hist_load=true
		shift 1
		;;

	*)
		;;
esac

#if [ $# -eq 0 ]
#then
#	read -r
	
#fi

# Processing the logs and print the final result
while [ $# -gt 0 ]; do
	
	if [ -f "$1" ]
	then 

		if [ "$filters_count" -eq 0 ] && [ ! "$hist_load" ] &&  [ ! "$hist_ip" ] && [ ! "$list_uri" ] && [ ! "$list_hosts" ] && [ ! "$list_ip" ]
		then
			cat "$1"
			exit 0
		fi 
		filtered=$(filters "$1")
		#echo "$filtered"
		
		if [ $list_ip ]
		then
			echo "$filtered" | awk ' { print $1} ' | sort | uniq
		fi

		if [ $list_hosts ]
		then
			adresses=$(echo "$filtered" | awk ' { print $1} ' | sort | uniq )
			listHosts "$adresses"
		fi

		if [ $list_uri ]
		then
			echo "$filtered" | cut -d'"' -f2 | cut -d' ' -f2 | awk ' /^\// ' | uniq
		fi
		shift 1
	else
		error invalid_input
		exit 1
	fi
done